// This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
// invoked with command: r_solver.py netlist1.txt --adapt 0 --out scat_mat.txt
const auto S_matrix[5][5] = {{                                                                                                                                                                          0,                                                                                                                                                          -Rc/(Rb + Rc + Rd),                                                                                                                                                   -(Rb + Rd)/(Rb + Rc + Rd),                                                                                                                                                           Rc/(Rb + Rc + Rd),                                                                                                                                                                          -1},
                             {                                                                                                                                 -Rb*Rc/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re), -(Rb*Rb*Rc - Rc*Rc*Rd - Rc*Rd*Rd + (Rb*Rb - Rc*Rc - 2*Rc*Rd - Rd*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),                 (Rb*Rb*Rc + Rb*Rc*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),   (2*Rb*Rb*Rc + Rb*Rc*Rc + 2*Rb*Rc*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),                                                                                                                                  -Rb*Rc/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)},
                             {                                                                                                                       -(Rb*Rc + Rc*Rd)/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re),                  (Rb*Rc*Rc + Rc*Rc*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),           -(Rb*Rc*Rc + Rc*Rc*Rd - (Rb*Rb - Rc*Rc + 2*Rb*Rd + Rd*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),                 -(Rb*Rc*Rc + Rc*Rc*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),                                                                                                                        -(Rb*Rc + Rc*Rd)/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)},
                             {                                                                                                                                  Rc*Rd/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re),     (2*Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),                 -(Rb*Rc*Rd + Rc*Rd*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),  (Rb*Rb*Rc + Rb*Rc*Rc - Rc*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc - Rd*Rd)*Re)/(Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re),                                                                                                                                   Rc*Rd/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)},
                             {                                                                                                                     -(Rb + Rc + Rd)*Re/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re),                                                                                                                                  -Rc*Re/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re),                                                                                                                           -(Rb + Rd)*Re/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re),                                                                                                                                   Rc*Re/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re),                                                                                                                         (Rb*Rc + Rc*Rd)/(Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)}};

Ra == (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)/(Rb + Rc + Rd)